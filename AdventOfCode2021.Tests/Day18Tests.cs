using Xunit;

namespace AdventOfCode2021.Tests;

public class Day18Tests {
    [Theory]
    [InlineData("[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]")]
    [InlineData("[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]")]
    [InlineData("[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]")]
    [InlineData("[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]")]
    [InlineData("[7,[5,[[3,8],[1,4]]]]")]
    [InlineData("[[2,[2,2]],[8,[8,1]]]")]
    [InlineData("[2,9]")]
    [InlineData("[1,[[[9,3],9],[[9,0],[0,7]]]]")]
    [InlineData("[[[5,[7,4]],7],1]")]
    [InlineData("[[[[4,2],2],6],[8,7]]")]
    [InlineData("[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]")]
    [InlineData("[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]")]
    [InlineData("[[[5,[2,8]],4],[5,[[9,9],0]]]")]
    [InlineData("[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]")]
    public void TestTreeParser(string s) {
        var rs = Day18.TreeParser.Parse(s).ToString();
        Assert.Equal(s, rs);
    }

    [Theory]
    [InlineData("[[1,2],[[3,4],5]]", 143)]
    [InlineData("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", 1384)]
    [InlineData("[[[[1,1],[2,2]],[3,3]],[4,4]]", 445)]
    [InlineData("[[[[3,0],[5,3]],[4,4]],[5,5]]", 791)]
    [InlineData("[[[[5,0],[7,4]],[5,5]],[6,6]]", 1137)]
    [InlineData("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", 3488)]
    [InlineData("[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]", 4140)]
    public void TestTreeCalculatorMagnitude(string s, long realMagnitude) {
        var magn = Day18.TreeCalculator.Magnitude(Day18.TreeParser.Parse(s));
        Assert.Equal(realMagnitude, magn);
    }
    
    [Theory]
    [InlineData("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[7,[[8,4],9]]],[1,1]]")]
    [InlineData("[[[[0,7],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[15,[0,13]]],[1,1]]")]
    public void TestExplode(string s, string exploded) {
        var node = Day18.TreeParser.Parse(s);
        Day18.TreeCalculator.Explode(node, Day18.TreeCalculator.ReduceOperation.Addition);
        Assert.Equal(exploded, node.ToString());
    }
    
    [Theory]
    [InlineData("[[[[0,7],4],[15,[0,13]]],[1,1]]","[[[[0,7],4],[[7,8],[0,13]]],[1,1]]")]
    [InlineData("[[[[0,7],4],[[7,8],[0,13]]],[1,1]]","[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]")]
    public void TestSplit(string s, string splitted) {
        var node = Day18.TreeParser.Parse(s);
        Day18.TreeCalculator.Split(node);
        Assert.Equal(splitted, node.ToString());
    }
    
    [Theory]
    [InlineData("[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]","[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
        "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]")]
    [InlineData("[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]","[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
        "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]")]    
    [InlineData("[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]","[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
        "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]")]    
    [InlineData("[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]","[7,[5,[[3,8],[1,4]]]]",
        "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]")]    
    [InlineData("[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]","[[2,[2,2]],[8,[8,1]]]",
        "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]")]    
    [InlineData("[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]","[2,9]",
        "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]")]    
    [InlineData("[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]","[1,[[[9,3],9],[[9,0],[0,7]]]]",
        "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]")]    
    [InlineData("[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]","[[[5,[7,4]],7],1]",
        "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]")]    
    [InlineData("[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]","[[[[4,2],2],6],[8,7]]",
        "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")]
    public void TestAddition(string expr1, string expr2, string expected) {
        var node1 = Day18.TreeParser.Parse(expr1);
        var node2 = Day18.TreeParser.Parse(expr2);
        var resultNode = Day18.TreeCalculator.Add(node1,node2);
        Assert.Equal(expected, resultNode.ToString());
    }
}